@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Core.Data.Models;
@using Chinook.Core.Data
@using Chinook.ClientModels
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@inject ITrackService trackService;
@inject IPlayListService playListService;
@inject IArtistService artistService;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @ErrorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private Modal PlaylistDialog { get; set; }
    private Artist Artist;
    private IList<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string newPlayList = string.Empty;
    private long? existPlayList = null;
    private string CurrentUserId;
    private string ErrorMessage;

    private List<Playlists> PlayLists = new();

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = artistService.GetArtist(ArtistId);
        Tracks = trackService.GetPlaylistTracks(ArtistId, CurrentUserId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await OnInitializedAsync();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var state = trackService.AddFavoriteTrack(trackId, CurrentUserId);

        if (state == 1)  InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        else ErrorMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} can not added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var (state, name) = trackService.RemoveTrack(trackId, CurrentUserId);

        if (state)  InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
        else ErrorMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} can not removed from playlist Favorites.";
    }

    private async void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        PlayLists = await playListService.GetFilterPlaylistsAsync(trackId, CurrentUserId);
        existPlayList = PlayLists.Select(c => c.playListId).FirstOrDefault();

        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist()
    {
        CloseInfoMessage();
        var state = 0;

        if (existPlayList != null) state = trackService.AddExistPlayList(SelectedTrack.TrackId, CurrentUserId, existPlayList);

        if (!string.IsNullOrEmpty(newPlayList))
             state = playListService.AddNewPlaylist(newPlayList, CurrentUserId);

        if (state == 1) InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {newPlayList}.";
        else ErrorMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} can not added to playlist {newPlayList}.";

        newPlayList = string.Empty;
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
        ErrorMessage = "";
    }
}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="existPlayList">
                @foreach (var item in PlayLists)
                {
                    <option value="@item.playListId" >@item.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" @bind="newPlayList" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
